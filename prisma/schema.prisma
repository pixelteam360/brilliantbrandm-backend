generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  image         String?   @default("")
  email         String    @unique
  password      String
  isDeleted     Boolean   @default(false)
  expirationOtp DateTime?
  otp           Int?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile[]

  @@map("Users")
}

model Profile {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  fullName           String
  image              String
  maritalStatus      MaritalStatus
  location           String
  maritalVerifyCount Int             @default(0)
  redFlag            Int             @default(0)
  yellowFlag         Int             @default(0)
  greenFlag          Int             @default(0)
  isDeleted          Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  userId             String          @db.ObjectId
  user               User            @relation(fields: [userId], references: [id])
  reviews            Review[]
  profileReports     ProfileReport[]

  @@map("Profile")
}

model ProfileReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@map("Profile-Report")
}

model Review {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  flag          FlagType
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profileId     String         @db.ObjectId
  profile       Profile        @relation(fields: [profileId], references: [id])
  reviewReports ReviewReport[]

  @@map("Review")
}

model ReviewReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviewId  String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])

  @@map("Review-Report")
}

enum UserRole {
  ADMIN
  USER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  IN_RELATIONSHIP
}

enum FlagType {
  RED
  GREEN
  YELLOW
}
